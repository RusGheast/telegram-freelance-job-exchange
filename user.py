from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, update
from database import SessionLocal
from models import User, WithdrawalRequest, Order
from states import Withdrawal, OrderTaking
from keyboards import main_menu_kb, cancel_order_kb, back
from config import config

router = Router()

@router.message(F.text == "/start")
async def start(msg: Message, state: FSMContext):
    await state.clear()
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        if not user:
            session.add(User(tg_id=msg.from_user.id, username=msg.from_user.username))
            await session.commit()

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OrderBot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
        "üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –±–∞–ª–∞–Ω—Å–æ–º\n"
        "üí≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
    )
    await msg.answer(welcome_text, reply_markup=main_menu_kb())

@router.message(F.text == "üìà –ü—Ä–æ—Ñ–∏–ª—å")
async def profile(msg: Message):
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        await msg.answer(f"üë§ @{user.username}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user.balance}\nüì¶ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {user.completed_orders}")

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
async def list_orders(msg: Message, state: FSMContext):
    async with SessionLocal() as session:
        orders = (await session.scalars(select(Order).where(Order.taken == False))).all()
        if not orders:
            await msg.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        else:
            text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n"
            for order in orders:
                text += f"ID: {order.id}\nüìå {order.title}\nüìù {order.description}\n\n"
            text += "\n–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å."
            await msg.answer(text)
            await state.set_state(OrderTaking.waiting_for_order_id)

@router.message(OrderTaking.waiting_for_order_id)
async def take_order(msg: Message, state: FSMContext):
    if not msg.text or not msg.text.isdigit():
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π ID –∑–∞–∫–∞–∑–∞.")
        return

    order_id = int(msg.text.strip())
    async with SessionLocal() as session:
        order = await session.get(Order, order_id)
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        if not order or order.taken:
            await msg.answer("‚ùå –≠—Ç–æ—Ç –∑–∞–∫–∞–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç.")
        else:
            order.taken = True
            order.taken_by = user.id
            await session.commit()
            await msg.answer(
                "‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–∫–∞–∑! –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                reply_markup=cancel_order_kb(order_id)
            )
            await msg.bot.send_message(
                config.ADMIN_ID,
                f"üë∑ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç:\n"
                f"üìã ID –∑–∞–∫–∞–∑–∞: {order.id}\n"
                f"üìå {order.title}\n"
                f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: @{user.username}\n\n"
                f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                f"/confirm_{order.id}_<—Å—É–º–º–∞>"
                )

    await state.clear()

@router.callback_query(F.data.startswith("cancel_"))
async def cancel_order(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[1])
    async with SessionLocal() as session:
        order = await session.get(Order, order_id)
        user = await session.scalar(select(User).where(User.tg_id == callback.from_user.id))
        if order and order.taken_by == user.id and not order.completed:
            order.taken = False
            order.taken_by = None
            await session.commit()
            await callback.message.edit_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –∑–∞–∫–∞–∑–∞.")
        else:
            await callback.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞.", show_alert=True)

@router.message(F.text == "üí≥ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
async def withdraw_request(msg: Message, state: FSMContext):
    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        await msg.answer(f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance} –º–æ–Ω–µ—Ç")
        if user.balance == 0:
            await msg.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å, –≤—ã–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:\n1 –º–æ–Ω–µ—Ç–∞ = 1 ‚ÇΩ", reply_markup=back)
    await state.set_state(Withdrawal.waiting_for_amount)

@router.message(Withdrawal.waiting_for_amount)
async def process_withdraw_amount(msg: Message, state: FSMContext):
    try:
        amount = int(msg.text)
        if amount <= 0:
            raise ValueError()
    except:
        await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        if amount > user.balance:
            await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            return
        await state.update_data(amount=amount)

        if user.payment_details:
            await msg.answer(
                f"–í–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:\n{user.payment_details}\n\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–î–∞',\n"
                "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞."
            )
            await state.set_state(Withdrawal.waiting_for_payment_details)
        else:
            await msg.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –±–∞–Ω–∫):")
            await state.set_state(Withdrawal.waiting_for_payment_details)

@router.message(Withdrawal.waiting_for_payment_details)
async def process_withdraw_payment_details(msg: Message, state: FSMContext):
    data = await state.get_data()
    amount = data.get("amount")
    payment_input = msg.text.strip()

    async with SessionLocal() as session:
        user = await session.scalar(select(User).where(User.tg_id == msg.from_user.id))
        if payment_input.lower() == "–¥–∞" and user.payment_details:
            payment_details = user.payment_details
        else:
            payment_details = payment_input
            user.payment_details = payment_details

        if amount > user.balance:
            await msg.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            await state.clear()
            return

        user.balance -= amount
        session.add(WithdrawalRequest(user_id=user.id, amount=amount))
        await session.commit()

        await msg.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {amount} –º–æ–Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–∞.\n–†–µ–∫–≤–∏–∑–∏—Ç—ã:\n{payment_details}")
        await msg.bot.send_message(config.ADMIN_ID, f"üîî –í—ã–≤–æ–¥: @{user.username} - {amount} –º–æ–Ω–µ—Ç\n–†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_details}")

    await state.clear()

@router.callback_query(F.data == "back")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.answer()
    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OrderBot!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã\n"
        "üìà –°–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ –±–∞–ª–∞–Ω—Å–æ–º\n"
        "üí≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É!"
    )
    await callback.message.edit_text(welcome_text)